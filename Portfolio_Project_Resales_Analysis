-- Portifolio Project: Guilherme Fialho


-- PART I: SQL data extraction
-- Sequence of queries to extract information from an e-commerce databases
-- The goal is to make a Resales Analysis


-- Data Exploration
-- Select all the tables we will be working on to check if everything is ok
USE PortifolioProject;

SELECT *
FROM PortifolioProject..customers_ds;

SELECT *
FROM PortifolioProject..geolocation_ds;

SELECT *
FROM PortifolioProject..order_items_ds;

SELECT *
FROM PortifolioProject..order_payments_ds;

SELECT *
FROM PortifolioProject..order_reviews_ds;

SELECT *
FROM PortifolioProject..orders_ds;

SELECT *
FROM PortifolioProject..products_ds;

SELECT *
FROM PortifolioProject..sellers_ds;

SELECT *
FROM PortifolioProject..product_category_name_translation;


-- Table geolocation_ds has some values in geolocation_city with not permited symbols, such as � and �, therefore, this collumn won`t be used
-- Let`s check all the cities in this table with this kind of special character, the ones we are looking for are ã��

SELECT geolocation_city
FROM PortifolioProject..geolocation_ds
WHERE geolocation_city LIKE '%[ã��]%'
GROUP BY geolocation_city
ORDER BY geolocation_city;

-- Compare the amount of value with special characters in comparison with the total amount of entries

WITH num_city_special AS (
SELECT COUNT(geolocation_city) AS num_special
FROM PortifolioProject..geolocation_ds
WHERE geolocation_city LIKE '%[ã��]')

SELECT COUNT(geolocation_city) AS total_num_city, num_special, ROUND((num_special/CAST(COUNT(geolocation_city) AS FLOAT))*100, 3) AS percentage_special
FROM PortifolioProject..geolocation_ds, num_city_special
GROUP BY num_special;

-----------------------------------------------------------------------------------------------------------------------------------------------------
-- Let's calculated some general numbers

-- Number of times a product was bought/sold
-- Order the products based on the number of times it was bought
SELECT DISTINCT product_id, COUNT(product_id) OVER (PARTITION BY product_id) AS num_products
FROM order_items_ds
ORDER BY num_products DESC;

-- Number of sales a seller made
-- Order the seller by the number of times they sold anything
SELECT DISTINCT seller_id, COUNT(seller_id) OVER (PARTITION BY seller_id) AS num_seller
FROM order_items_ds
ORDER BY num_seller DESC;


-- Some questions need to be answered.
---------------------------------------------------------------------------------------------------------------------------------------------------
-- FIRST QUESTION: DO PEOPLE WHO BEST REVIEW TENDS TO BUY AGAIN?
-- In order to calculate the Pearson`s correlation between the number of orders a single customer does and the average review given by the same customer
-- The following query organizes all data required 

-- customer_unique_id | num_orders_per_customer | avg_review_per_customer
WITH aux AS (
	SELECT customer_id, customer_unique_id
	FROM PortifolioProject..customers_ds)

SELECT DISTINCT customer_unique_id, COUNT(ord.order_id) OVER (PARTITION BY customer_unique_id) as num_orders_per_customer, 
	AVG(rev.review_score) OVER (PARTITION BY customer_unique_id) AS avg_review_per_customer
FROM PortifolioProject..orders_ds AS ord
LEFT JOIN aux ON aux.customer_id = ord.customer_id
LEFT JOIN PortifolioProject..order_reviews_ds as rev ON rev.order_id = ord.order_id
GROUP BY customer_unique_id, ord.order_id, rev.review_score
ORDER BY num_orders_per_customer DESC;

---------------------------------------------------------------------------------------------------------

-- MORE QUESTIONS:
	-- DO ITEMS WITH CHEAPER AVERAGE FREIGHT PRICE TENDS TO BE PURCHASED MORE OFTEN?
	-- DO ITEMS WITH SMALLER PERCENTAGE RATIO BETWEEN FREIGHT AND PRICE TENDS TO BE PURCHASED MORE OFTEN?
	-- DO ITEMS WITH SMALLER AVERAGE DISTANCE BETWEEN SELLER AND CUSTOMER TENDS TO BE PURCHASED MORE OFTEN?

-- Query a table with the following structure in order to answer all the questions above
-- product_id | number_of_times_the_product_was_bought | avg_freight | avg_price | percentage_freight_over_price | avg_distance_between_sellers_customer

-- For this we will create two views, but they need to be executed in another query tab


-- Create a VIEW with 
-- customer_zip_code_prefix | geolocation_lat | geolocation_lng

-- Create a VIEW with 
-- product_id | customer_unique_id | avg_geolocation_lat | avg_geolocation_lng
--CREATE VIEW customer_geolocation AS
--	WITH avareges_geolocation AS (
--		SELECT DISTINCT geolocation_zip_code_prefix, 
--			AVG(geolocation_lat) OVER (PARTITION BY geolocation_zip_code_prefix) AS avg_geolocation_lat, 
--			AVG(geolocation_lng) OVER (PARTITION BY geolocation_zip_code_prefix) AS avg_geolocation_lng
--		FROM geolocation_ds
--		GROUP BY geolocation_zip_code_prefix, geolocation_lat, geolocation_lng)

--	SELECT ord_item.product_id, cust.customer_unique_id, 
--		geo.avg_geolocation_lat, geo.avg_geolocation_lng
--	FROM avareges_geolocation AS geo
--	INNER JOIN customers_ds AS cust ON cust.customer_zip_code_prefix = geo.geolocation_zip_code_prefix
--	LEFT JOIN orders_ds AS ord ON ord.customer_id = cust.customer_id
--	LEFT JOIN order_items_ds as ord_item ON ord_item.order_id = ord.order_id;
--	-- GROUP BY geo.geolocation_lat, geo.geolocation_lng
--	--WHERE ord_item.product_id <> 'NULL';

SELECT * FROM customer_geolocation;

-- Create a VIEW with 
-- product_id | seller_id | avg_geolocation_lat | avg_geolocation_lng

--CREATE VIEW seller_geolocation AS
--	WITH avareges_geolocation AS (
--		SELECT DISTINCT geolocation_zip_code_prefix, 
--			AVG(geolocation_lat) OVER (PARTITION BY geolocation_zip_code_prefix) AS avg_geolocation_lat, 
--			AVG(geolocation_lng) OVER (PARTITION BY geolocation_zip_code_prefix) AS avg_geolocation_lng
--		FROM geolocation_ds
--		GROUP BY geolocation_zip_code_prefix, geolocation_lat, geolocation_lng)

--	SELECT ord_item.product_id, sell.seller_id, geo.avg_geolocation_lat, geo.avg_geolocation_lng
--	FROM avareges_geolocation AS geo
--	INNER JOIN sellers_ds AS sell ON sell.seller_zip_code_prefix = geo.geolocation_zip_code_prefix
--	LEFT JOIN order_items_ds AS ord_item ON ord_item.seller_id = sell.seller_id;

SELECT * FROM seller_geolocation;


-- Now we can query a table with the following structure
-- product_id | distance_between_sellers_customer

SELECT DISTINCT sell_geo.product_id,
	(6371 * acos( 
                cos( radians(CAST(cust_geo.avg_geolocation_lat AS FLOAT)) ) 
              * cos( radians(CAST(sell_geo.avg_geolocation_lat AS FLOAT)) ) 
              * cos( radians(CAST(sell_geo.avg_geolocation_lng AS FLOAT)) - radians(CAST(cust_geo.avg_geolocation_lng  AS FLOAT)) ) 
              + sin( radians(CAST(cust_geo.avg_geolocation_lat AS FLOAT)) ) 
              * sin( radians(CAST(sell_geo.avg_geolocation_lat AS FLOAT)) )
                ) ) as distance_in_km
FROM seller_geolocation AS sell_geo
JOIN customer_geolocation AS cust_geo ON cust_geo.product_id = sell_geo.product_id
WHERE sell_geo.product_id <> 'NULL';


-- We will use the last query to structure the next one, which will have the final layout
-- product_id | number_of_times_the_product_was_bought | avg_freight | avg_price | percentage_freight_over_price | avg_distance_between_sellers_customer

-- This query selects the main table to answer interesting questions, such as:
			-- Do items with cheaper average freight price tends to be purchased more often?
			-- Do items with smaller percentage ratio between freight and price tends to be purchased more often?
			-- Do items with smaller average distance between seller and customer tends to be purchased more often?

WITH distance_table AS
	(SELECT DISTINCT sell_geo.product_id,/* sell_geo.seller_id, cust_geo.customer_unique_id, 
		sell_geo.avg_geolocation_lat AS sell_avg_geolocation_lat, cust_geo.avg_geolocation_lat AS cust_avg_geolocation_lat,
		sell_geo.avg_geolocation_lng AS sell_avg_geolocation_lng, cust_geo.avg_geolocation_lng AS cust_avg_geolocation_lng,*/
		AVG((6371 * acos( 
					cos( radians(CAST(cust_geo.avg_geolocation_lat AS FLOAT)) ) 
				  * cos( radians(CAST(sell_geo.avg_geolocation_lat AS FLOAT)) ) 
				  * cos( radians(CAST(sell_geo.avg_geolocation_lng AS FLOAT)) - radians(CAST(cust_geo.avg_geolocation_lng  AS FLOAT)) ) 
				  + sin( radians(CAST(cust_geo.avg_geolocation_lat AS FLOAT)) ) 
				  * sin( radians(CAST(sell_geo.avg_geolocation_lat AS FLOAT)) )
					) )) OVER (PARTITION BY sell_geo.product_id) as distance_in_km
	FROM seller_geolocation AS sell_geo
	JOIN customer_geolocation AS cust_geo ON cust_geo.product_id = sell_geo.product_id)

SELECT DISTINCT ord.product_id, COUNT(ord.product_id) OVER (PARTITION BY ord.product_id) AS num_product,
	AVG(ord.freight_value) OVER (PARTITION BY ord.product_id) AS avg_freight,
	AVG(ord.price) OVER (PARTITION BY ord.product_id) AS avg_price,
	(AVG(ord.freight_value) OVER (PARTITION BY ord.product_id))/(AVG(ord.price) OVER (PARTITION BY ord.product_id))*100 AS percentage_freight_over_price,
	AVG(dis.distance_in_km) OVER (PARTITION BY ord.product_id) AS avg_distance_in_km
FROM PortifolioProject..order_items_ds AS ord
RIGHT JOIN distance_table AS dis ON ord.product_id =  dis.product_id
WHERE ord.product_id <> 'NULL'
ORDER BY num_product DESC;

